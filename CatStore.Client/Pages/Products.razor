@page "/products"
@using MudBlazor
@using CatStore.Models
@using System.Net.Http.Json
@inject HttpClient httpClient


<PageTitle>Products</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Products</MudText>

<MudTable Items="@ProductsList" T="ProductDto" SelectedItemsChanged="OnSelectedItemsChanged" MultiSelection="true" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="@fixed_header">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer />
        <MudButton OnClick="@SearchProducts" Size="Size.Medium">Search</MudButton>
        <MudTextField @bind-Value="searchProductString"
        Placeholder="Search"
        Adornment="Adornment.Start"
        Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate Context="product">
        <MudTd DataLabel="Id">@product.Id</MudTd>
        <MudTd DataLabel="Name">@product.Name</MudTd>
        <MudTd DataLabel="Description">@product.Description</MudTd>
        <MudTd DataLabel="Price">@product.Price</MudTd>
        <MudTd DataLabel="Category">@GetCategoryName(product.CategoryId)</MudTd>
        <MudTd DataLabel="Status">@(product.Status ? "In Stock" : "Out of Stock")</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>
<MudButton Variant="Variant.Text" Disabled="btnCartIsDisabled" OnClick="AddCart">Add to Cart</MudButton>
<MudButton Variant="Variant.Text" OnClick="NewProduct">New Product</MudButton>
<MudButton Variant="Variant.Text" Disabled="btnUpdateIsDisabled" OnClick="Update">Update</MudButton>
<MudButton Variant="Variant.Text" Disabled="btnDeleteIsDisabled" OnClick="Delete">Delete</MudButton>
<MudText>@DeleteResult</MudText>

@if (isCartVisible)
{
    <MudTable T="ProductDto" Items="@CartList" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Category">@context.CategoryId</MudTd>
            <MudTd DataLabel="Status">@(context.Status ? "In Stock" : "Out of Stock")</MudTd>
        </RowTemplate>
    </MudTable>
    <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="3">
        <MudIconButton Icon="@Icons.Material.Filled.Search" 
        Color="@Color.Primary"
        OnClick="SearchCustomers" />
        <MudTextField @bind-Value="searchCustomerString" 
        Placeholder="Search on your ID or email"
        Class="mt-0" />
    </MudStack>
    <MudText>@customerResultString</MudText>
    <MudButton Variant="Variant.Text" Disabled="btnBuyIsDisabled" OnClick="Buy">Buy</MudButton>
}

@if (isNewProductVisible)
{
    <MudTextField @bind-Value="id" Label="Id" ReadOnly="true" Variant="Variant.Text" />
    <MudTextField @bind-Value="name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
    <MudTextField @bind-Value="description" Label="Description" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
    <MudTextField @bind-Value="price" Label="Price" Variant="Variant.Text" Margin="Margin.Dense" InputType="InputType.Number" MaxLength="7"></MudTextField>
    <MudSelect @bind-Value="_selectedCategory" Label="Select a Category" Variant="Variant.Outlined" ShrinkLabel>
        @foreach (var category in CategoryList)
        {
            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
        }
    </MudSelect>
    <MudButton Variant="Variant.Text" OnClick="Add">Add</MudButton>
    <MudButton Variant="Variant.Text" OnClick="CancelAdd">Cancel</MudButton>
}

@if (isUpdateVisible)
{
    <MudTextField @bind-Value="id" Label="Id" ReadOnly="true" Variant="Variant.Text" />
    <MudTextField @bind-Value="name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
    <MudTextField @bind-Value="description" Label="Description" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
    <MudTextField @bind-Value="price" Label="Price" Variant="Variant.Text" Margin="Margin.Dense" InputType="InputType.Number" MaxLength="7"></MudTextField>
    <MudSelect @bind-Value="_selectedCategory" Label="Select a Category" Variant="Variant.Outlined" ShrinkLabel>
        @foreach (var category in CategoryList)
        {
            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
        }
    </MudSelect>
    <MudCheckBox @bind-Value="status" Label="Default">InStock</MudCheckBox>
    <MudButton Variant="Variant.Text" OnClick="UpdateProduct">Update</MudButton>
    <MudButton Variant="Variant.Text" OnClick="CancelUpdate">Cancel</MudButton>
}

@code {
    private int _selectedCategory;

    private int id;
    private string name;
    private string description;
    private int price;
    private bool status;
    private bool isCartVisible = false;
    private bool isNewProductVisible = false;
    private bool isUpdateVisible = false;

    private string DeleteResult;

    int? foundCustomerId;
    private string customerResultString = "No Customer";
    private string searchCustomerString = "";
    bool btnBuyIsDisabled = true;
    bool btnCartIsDisabled = true;
    bool btnUpdateIsDisabled = true;
    bool btnDeleteIsDisabled = true;
    private HashSet<ProductDto> selectedProducts = new HashSet<ProductDto>();

    bool fixed_header = true;
    private int newId;
    private string searchProductString = "";
    private List<ProductDto> ProductsList = new();
    private List<ProductDto> CartList = new();
    private List<CategoryDto> CategoryList = new();
    private List<CustomerDto> CustomerList = new();

    private void CancelAdd() => isNewProductVisible = false;
    private void CancelUpdate() => isUpdateVisible = false;

    private int SetNewId()
    {
        var list = ProductsList.OrderBy(p => p.Id).ToList();
        return list.Last().Id + 1;
    }

    private async Task UpdateProduct()
    {
        var updateProduct = new ProductDto()
            {
                Id = id,
                Name = name,
                Price = price,
                CategoryId = _selectedCategory,
                Description = description,
                Status = status
            };
        var result = await httpClient.PutAsJsonAsync("api/product", updateProduct);
        Console.WriteLine(result);
        await LoadProducts();
        isUpdateVisible = false;
    }

    private void NewProduct()
    {
        isUpdateVisible = false;
        isNewProductVisible = true;
        _selectedCategory = CategoryList.First().Id;
        name = "";
        price = 0;
        description = "";

        if (ProductsList != null) newId = SetNewId();
    }

    private async Task Add()
    {
        if (ProductsList != null) newId = SetNewId();

        var newProduct = new ProductDto()
        {
            Id = newId,
            Name = name,
            Description = description,
            Price = price,
            CategoryId = _selectedCategory,
            Status = true 
        };

        Console.WriteLine(newProduct);

        try
        {
            var result = await httpClient.PostAsJsonAsync("api/product", newProduct);
            if (result.IsSuccessStatusCode)
            {
                await LoadProducts();
                StateHasChanged();
                isNewProductVisible = false;
            }
            else
            {
                Console.WriteLine("Error adding product.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding product: {ex.Message}");
        }
    }

    private async Task Buy()
    {
        foreach (var item in CartList)
        {
            var result = await httpClient.PutAsync($"api/customer/{foundCustomerId}/{item.Id}", null);
            if (!result.IsSuccessStatusCode)
            {
                Console.WriteLine($"Failed to add product {item.Id} to customer {foundCustomerId}. Status code: {result.StatusCode}");
            }
        }
        isCartVisible = false;
    }

    async Task AddCart()
    {
        if (selectedProducts.Count() > 0)
        {
            isCartVisible = true;
            foreach (var item in selectedProducts)
            {
                CartList.Add(item);
            }
            selectedProducts.Clear();
        }
    }

    async Task Update()
    {
        isNewProductVisible = false;
        isUpdateVisible = true;
        if (selectedProducts.Count == 1)
        {
            var productToUpdate = selectedProducts.First();
            id = productToUpdate.Id;
            name = productToUpdate.Name;
            _selectedCategory = productToUpdate.CategoryId ?? 0;
            description = productToUpdate.Description;
            price = productToUpdate.Price;
            status = productToUpdate.Status;
        }

    }

    async Task Delete()
    {
        if (selectedProducts.Count == 1)
        {
            var productToDelete = selectedProducts.First();

            var result = await httpClient.PutAsync($"api/product/allowDelete{productToDelete.Id}", null);

            if (result.IsSuccessStatusCode)
            {
                await httpClient.DeleteAsync($"api/product/{productToDelete.Id}");
                await LoadProducts();
                selectedProducts.Clear();
                btnDeleteIsDisabled = true;
                btnUpdateIsDisabled = true;
                btnCartIsDisabled = true;
            }
            else await LimitedDisplay();
        }
    }

    async Task LimitedDisplay()
    {
        DeleteResult = "Unable to delete product: Product is in a cart";
        await Task.Delay(50000);
        DeleteResult = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategory();
        await LoadCustomers();
        isCartVisible = false;
    }

    private async Task LoadProducts()
    {
        try
        {
            ProductsList = await httpClient.GetFromJsonAsync<List<ProductDto>>("api/product");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    private async Task LoadCustomers()
    {
        try
        {
            CustomerList = await httpClient.GetFromJsonAsync<List<CustomerDto>>("api/customer");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadCategory()
    {
        try
        {
            CategoryList = await httpClient.GetFromJsonAsync<List<CategoryDto>>("api/category");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading customers: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private string GetCategoryName(int? categoryId)
    {
        var category = CategoryList.FirstOrDefault(c => c.Id == categoryId);
        return category?.Name ?? "Unknown";
    }

    private void SearchCustomers()
    {
        if (searchCustomerString != string.Empty)
        {
            if (Int32.TryParse(searchCustomerString, out int id))
            {
                var customer = CustomerList.FirstOrDefault(c => c.Id == id);
                if (customer != null)
                {
                    foundCustomerId = customer.Id;
                    btnBuyIsDisabled = false;
                    customerResultString = $"Found {customer.FirstName} {customer.LastName}";
                }
                else
                {
                    customerResultString = $"There is no customer by id: {id}";
                    btnBuyIsDisabled = true;
                }
            }
            else
            {
                var customers = CustomerList.Where(c => c.Email.ToLower().Contains(searchCustomerString.ToLower()));
                if (customers == null)
                {
                    foundCustomerId = null;
                    btnBuyIsDisabled = true;
                    customerResultString = $"There is no customers found by this input {searchCustomerString}";
                }
                else if (customers.Count() == 1)
                {
                    foundCustomerId = customers.First().Id;
                    btnBuyIsDisabled = false;
                    customerResultString = $"Found {customers.First().FirstName} {customers.First().LastName}";
                }
                else if (customers.ToList().Count() > 1)
                {
                    foundCustomerId = null;
                    btnBuyIsDisabled = true;
                    customerResultString = $"There is multible customers found by this input {searchCustomerString}";
                }
            }

        }
        else customerResultString = "The searchfield is emty";
        StateHasChanged();
    }

    private async Task SearchProducts()
    {
        if (searchProductString != string.Empty)
        {
            ProductsList.Clear();
            try
            {
                if (Int32.TryParse(searchProductString, out int id))
                {
                    var product = await httpClient.GetFromJsonAsync<ProductDto>($"api/product/{id}");
                    if (product != null) ProductsList.Add(product);
                }
                else
                {
                    ProductsList = await httpClient.GetFromJsonAsync<List<ProductDto>>($"api/product/get/{searchProductString}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error performing search: {ex.Message}");
            }
            finally
            {
                StateHasChanged();
            }
            if (searchProductString == "")
            {
                await LoadProducts();
            }
        }
        else 
        {
            LoadProducts();
        }
    }
    private void OnSelectedItemsChanged(HashSet<ProductDto> products)
    {
        selectedProducts = products;

        if (products.Count == 0)
        {
            btnCartIsDisabled = true;
            btnUpdateIsDisabled = true;
            btnDeleteIsDisabled = true;
        }
        else if (products.Count == 1)
        {
            btnCartIsDisabled = false;
            btnUpdateIsDisabled = false;
            btnDeleteIsDisabled = false;
        }
        else
        {
            btnCartIsDisabled = false;
            btnUpdateIsDisabled = true;
            btnDeleteIsDisabled = true;
        }
    }
}
